{"_id": 1, "function_list": ["\"_id\": \"1\", \"Function Name\": \"test_cannot_handle_non_string_objects\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"self\", \"Defaults\": \"\", \"Code\": \"    def test_cannot_handle_non_string_objects(self):\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(None)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"NoneType\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(False)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"bool\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(0)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"int\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize([])\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"list\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize({'a': 1})\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"dict\"')\"", "\"_id\": \"1\", \"Function Name\": \"reverse\", \"Docstring\": \"Returns the string with its chars reversed.\n\n*Example:*\n\n>>> reverse('hello') # returns 'olleh'\n\n:param input_string: String to revert.\n:type input_string: str\n:return: Reversed string.\", \"Arguments\": \"input_string\", \"Defaults\": \"\", \"Code\": \"def reverse(input_string: str) -> str:\n    \"\"\"\n    Returns the string with its chars reversed.\n\n    *Example:*\n\n    >>> reverse('hello') # returns 'olleh'\n\n    :param input_string: String to revert.\n    :type input_string: str\n    :return: Reversed string.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    return input_string[::-1]\""]}
{"_id": 4, "function_list": ["\"_id\": \"4\", \"Function Name\": \"strip_html\", \"Docstring\": \"Remove html code contained into the given string.\n\n*Examples:*\n\n>>> strip_html('test: <a href=\"foo/bar\">click here</a>') # returns 'test: '\n>>> strip_html('test: <a href=\"foo/bar\">click here</a>', keep_tag_content=True) # returns 'test: click here'\n\n:param input_string: String to manipulate.\n:type input_string: str\n:param keep_tag_content: True to preserve tag content, False to remove tag and its content too (default).\n:type keep_tag_content: bool\n:return: String with html removed.\", \"Arguments\": \"input_string, keep_tag_content\", \"Defaults\": \"False\", \"Code\": \"def strip_html(input_string: str, keep_tag_content: bool = False) -> str:\n    \"\"\"\n    Remove html code contained into the given string.\n\n    *Examples:*\n\n    >>> strip_html('test: <a href=\"foo/bar\">click here</a>') # returns 'test: '\n    >>> strip_html('test: <a href=\"foo/bar\">click here</a>', keep_tag_content=True) # returns 'test: click here'\n\n    :param input_string: String to manipulate.\n    :type input_string: str\n    :param keep_tag_content: True to preserve tag content, False to remove tag and its content too (default).\n    :type keep_tag_content: bool\n    :return: String with html removed.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    r = HTML_TAG_ONLY_RE if keep_tag_content else HTML_RE\n\n    return r.sub('', input_string)\"", "\"_id\": \"4\", \"Function Name\": \"strip_html\", \"Docstring\": \"Remove html code contained into the given string.\n\n*Examples:*\n\n>>> strip_html('test: <a href=\"foo/bar\">click here</a>') # returns 'test: '\n>>> strip_html('test: <a href=\"foo/bar\">click here</a>', keep_tag_content=True) # returns 'test: click here'\n\n:param input_string: String to manipulate.\n:type input_string: str\n:param keep_tag_content: True to preserve tag content, False to remove tag and its content too (default).\n:type keep_tag_content: bool\n:return: String with html removed.\", \"Arguments\": \"input_string, keep_tag_content\", \"Defaults\": \"False\", \"Code\": \"def strip_html(input_string: str, keep_tag_content: bool = False) -> str:\n    \"\"\"\n    Remove html code contained into the given string.\n\n    *Examples:*\n\n    >>> strip_html('test: <a href=\"foo/bar\">click here</a>') # returns 'test: '\n    >>> strip_html('test: <a href=\"foo/bar\">click here</a>', keep_tag_content=True) # returns 'test: click here'\n\n    :param input_string: String to manipulate.\n    :type input_string: str\n    :param keep_tag_content: True to preserve tag content, False to remove tag and its content too (default).\n    :type keep_tag_content: bool\n    :return: String with html removed.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    r = HTML_TAG_ONLY_RE if keep_tag_content else HTML_RE\n\n    return r.sub('', input_string)\""]}
{"_id": 5, "function_list": ["\"_id\": \"5\", \"Function Name\": \"test_should_trim_spaces_inside_double_quotes\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"self\", \"Defaults\": \"\", \"Code\": \"    def test_should_trim_spaces_inside_double_quotes(self):\n        self.assertEqual('Foo \"bar\" baz', prettify('foo \" bar \" baz'))\n        self.assertEqual('Foo \"bar\" baz', prettify('foo \"bar \" baz'))\n        self.assertEqual('Foo \"bar\" baz', prettify('foo \" bar\" baz'))\"", "\"_id\": \"5\", \"Function Name\": \"test_should_remove_space_after_number_if_followed_by_percentage\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"self\", \"Defaults\": \"\", \"Code\": \"    def test_should_remove_space_after_number_if_followed_by_percentage(self):\n        self.assertEqual('100% python', prettify('100 % python'))\n        self.assertEqual('100%', prettify('100 %'))\"", "\"_id\": \"5\", \"Function Name\": \"format\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"self\", \"Defaults\": \"\", \"Code\": \"    def format(self) -> str:\n        # map of temporary placeholders\n        placeholders = {}\n        out = self.input_string\n\n        # looks for url or email and updates placeholders map with found values\n        placeholders.update({self.__placeholder_key(): m[0] for m in URLS_RE.findall(out)})\n        placeholders.update({self.__placeholder_key(): m for m in EMAILS_RE.findall(out)})\n\n        # replace original value with the placeholder key\n        for p in placeholders:\n            out = out.replace(placeholders[p], p, 1)\n\n        out = PRETTIFY_RE['UPPERCASE_FIRST_LETTER'].sub(self.__uppercase_first_char, out)\n        out = PRETTIFY_RE['DUPLICATES'].sub(self.__remove_duplicates, out)\n        out = PRETTIFY_RE['RIGHT_SPACE'].sub(self.__ensure_right_space_only, out)\n        out = PRETTIFY_RE['LEFT_SPACE'].sub(self.__ensure_left_space_only, out)\n        out = PRETTIFY_RE['SPACES_AROUND'].sub(self.__ensure_spaces_around, out)\n        out = PRETTIFY_RE['SPACES_INSIDE'].sub(self.__remove_internal_spaces, out)\n        out = PRETTIFY_RE['UPPERCASE_AFTER_SIGN'].sub(self.__uppercase_first_letter_after_sign, out)\n        out = PRETTIFY_RE['SAXON_GENITIVE'].sub(self.__fix_saxon_genitive, out)\n        out = out.strip()\n\n        # restore placeholder keys with their associated original value\n        for p in placeholders:\n            out = out.replace(p, placeholders[p], 1)\n\n        return out\""]}
{"_id": 6, "function_list": ["\"_id\": \"6\", \"Function Name\": \"asciify\", \"Docstring\": \"Force string content to be ascii-only by translating all non-ascii chars into the closest possible representation\n(eg: ó -> o, Ë -> E, ç -> c...).\n\n**Bear in mind**: Some chars may be lost if impossible to translate.\n\n*Example:*\n\n>>> asciify('èéùúòóäåëýñÅÀÁÇÌÍÑÓË') # returns 'eeuuooaaeynAAACIINOE'\n\n:param input_string: String to convert\n:return: Ascii utf-8 string\", \"Arguments\": \"input_string\", \"Defaults\": \"\", \"Code\": \"def asciify(input_string: str) -> str:\n    \"\"\"\n    Force string content to be ascii-only by translating all non-ascii chars into the closest possible representation\n    (eg: ó -> o, Ë -> E, ç -> c...).\n\n    **Bear in mind**: Some chars may be lost if impossible to translate.\n\n    *Example:*\n\n    >>> asciify('èéùúòóäåëýñÅÀÁÇÌÍÑÓË') # returns 'eeuuooaaeynAAACIINOE'\n\n    :param input_string: String to convert\n    :return: Ascii utf-8 string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    # \"NFKD\" is the algorithm which is able to successfully translate the most of non-ascii chars\n    normalized = unicodedata.normalize('NFKD', input_string)\n\n    # encode string forcing ascii and ignore any errors (unrepresentable chars will be stripped out)\n    ascii_bytes = normalized.encode('ascii', 'ignore')\n\n    # turns encoded bytes into an utf-8 string\n    ascii_string = ascii_bytes.decode('utf-8')\n\n    return ascii_string\""]}
{"_id": 7, "function_list": ["\"_id\": \"7\", \"Function Name\": \"test_slugify_trim_strings_and_extra_white_spaces\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"self\", \"Defaults\": \"\", \"Code\": \"    def test_slugify_trim_strings_and_extra_white_spaces(self):\n        self.assertEqual(slugify('hello '), 'hello')\n        self.assertEqual(slugify(' hello'), 'hello')\n        self.assertEqual(slugify(' hello '), 'hello')\n        self.assertEqual(slugify(' hello world '), 'hello-world')\n        self.assertEqual(slugify('''\n            \\n\\t\n            hello \\n\\t world\n            \\n\\t\n        '''), 'hello-world')\""]}
{"_id": 8, "function_list": ["\"_id\": \"8\", \"Function Name\": \"__require_valid_input_and_encoding\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"input_string, encoding\", \"Defaults\": \"\", \"Code\": \"    def __require_valid_input_and_encoding(input_string: str, encoding: str):\n        if not is_string(input_string):\n            raise InvalidInputError(input_string)\n\n        if len(input_string) == 0:\n            raise ValueError('Input string cannot be empty')\n\n        if not is_string(encoding):\n            raise ValueError('Invalid encoding')\"", "\"_id\": \"8\", \"Function Name\": \"test_cannot_handle_non_string_objects\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"self\", \"Defaults\": \"\", \"Code\": \"    def test_cannot_handle_non_string_objects(self):\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(None)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"NoneType\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(False)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"bool\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(0)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"int\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize([])\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"list\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize({'a': 1})\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"dict\"')\""]}
{"_id": 10, "function_list": ["\"_id\": \"10\", \"Function Name\": \"__require_valid_input_and_encoding\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"input_string, encoding\", \"Defaults\": \"\", \"Code\": \"    def __require_valid_input_and_encoding(input_string: str, encoding: str):\n        if not is_string(input_string):\n            raise InvalidInputError(input_string)\n\n        if len(input_string) == 0:\n            raise ValueError('Input string cannot be empty')\n\n        if not is_string(encoding):\n            raise ValueError('Invalid encoding')\"", "\"_id\": \"10\", \"Function Name\": \"decompress\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"cls, input_string, encoding\", \"Defaults\": \"'utf-8'\", \"Code\": \"    def decompress(cls, input_string: str, encoding: str = 'utf-8') -> str:\n        cls.__require_valid_input_and_encoding(input_string, encoding)\n\n        # turns input string into a sequence of bytes\n        # (the string is assumed to be a previously compressed string, therefore we have to decode it using base64)\n        input_bytes = base64.urlsafe_b64decode(input_string)\n\n        # decompress bytes using zlib\n        decompressed_bytes = zlib.decompress(input_bytes)\n\n        # decode the decompressed bytes to get the original string back\n        original_string = decompressed_bytes.decode(encoding)\n\n        return original_string\""]}
{"_id": 11, "function_list": ["\"_id\": \"11\", \"Function Name\": \"test_raise_exception_if_not_string\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"self\", \"Defaults\": \"\", \"Code\": \"    def test_raise_exception_if_not_string(self):\n        # noinspection PyTypeChecker\n        self.assertRaises(InvalidInputError, lambda: asciify(None))\n\n        # noinspection PyTypeChecker\n        self.assertRaises(InvalidInputError, lambda: asciify(1))\n\n        # noinspection PyTypeChecker\n        self.assertRaises(InvalidInputError, lambda: asciify(True))\n\n        # noinspection PyTypeChecker\n        self.assertRaises(InvalidInputError, lambda: asciify(['nope']))\""]}
{"_id": 12, "function_list": ["\"_id\": \"12\", \"Function Name\": \"test_cannot_handle_non_string_objects\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"self\", \"Defaults\": \"\", \"Code\": \"    def test_cannot_handle_non_string_objects(self):\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(None)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"NoneType\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(False)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"bool\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(0)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"int\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize([])\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"list\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize({'a': 1})\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"dict\"')\""]}
{"_id": 14, "function_list": ["\"_id\": \"14\", \"Function Name\": \"test_cannot_handle_non_string_objects\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"self\", \"Defaults\": \"\", \"Code\": \"    def test_cannot_handle_non_string_objects(self):\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(None)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"NoneType\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(False)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"bool\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(0)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"int\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize([])\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"list\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize({'a': 1})\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"dict\"')\""]}
{"_id": 16, "function_list": ["\"_id\": \"16\", \"Function Name\": \"test_returns_true_for_signed_integers\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"self\", \"Defaults\": \"\", \"Code\": \"    def test_returns_true_for_signed_integers(self):\n        self.assertTrue(is_integer('+1'))\n        self.assertTrue(is_integer('+42'))\n        self.assertTrue(is_integer('+1e3'))\n\n        self.assertTrue(is_integer('-1'))\n        self.assertTrue(is_integer('-42'))\n        self.assertTrue(is_integer('-1e3'))\"", "\"_id\": \"16\", \"Function Name\": \"test_cannot_handle_non_string_objects\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"self\", \"Defaults\": \"\", \"Code\": \"    def test_cannot_handle_non_string_objects(self):\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(None)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"NoneType\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(False)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"bool\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(0)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"int\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize([])\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"list\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize({'a': 1})\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"dict\"')\"", "\"_id\": \"16\", \"Function Name\": \"test_cannot_handle_non_string_objects\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"self\", \"Defaults\": \"\", \"Code\": \"    def test_cannot_handle_non_string_objects(self):\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(None)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"NoneType\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(False)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"bool\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(0)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"int\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize([])\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"list\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize({'a': 1})\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"dict\"')\""]}
{"_id": 18, "function_list": ["\"_id\": \"18\", \"Function Name\": \"is_url\", \"Docstring\": \"Check if a string is a valid url.\n\n*Examples:*\n\n>>> is_url('http://www.mysite.com') # returns true\n>>> is_url('https://mysite.com') # returns true\n>>> is_url('.mysite.com') # returns false\n\n:param input_string: String to check.\n:type input_string: str\n:param allowed_schemes: List of valid schemes ('http', 'https', 'ftp'...). Default to None (any scheme is valid).\n:type allowed_schemes: Optional[List[str]]\n:return: True if url, false otherwise\", \"Arguments\": \"input_string, allowed_schemes\", \"Defaults\": \"None\", \"Code\": \"def is_url(input_string: Any, allowed_schemes: Optional[List[str]] = None) -> bool:\n    \"\"\"\n    Check if a string is a valid url.\n\n    *Examples:*\n\n    >>> is_url('http://www.mysite.com') # returns true\n    >>> is_url('https://mysite.com') # returns true\n    >>> is_url('.mysite.com') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allowed_schemes: List of valid schemes ('http', 'https', 'ftp'...). Default to None (any scheme is valid).\n    :type allowed_schemes: Optional[List[str]]\n    :return: True if url, false otherwise\n    \"\"\"\n    if not is_full_string(input_string):\n        return False\n\n    valid = URL_RE.match(input_string) is not None\n\n    if allowed_schemes:\n        return valid and any([input_string.startswith(s) for s in allowed_schemes])\n\n    return valid\""]}
{"_id": 20, "function_list": ["\"_id\": \"20\", \"Function Name\": \"is_credit_card\", \"Docstring\": \"Checks if a string is a valid credit card number.\nIf card type is provided then it checks against that specific type only,\notherwise any known credit card number will be accepted.\n\nSupported card types are the following:\n\n- VISA\n- MASTERCARD\n- AMERICAN_EXPRESS\n- DINERS_CLUB\n- DISCOVER\n- JCB\n\n:param input_string: String to check.\n:type input_string: str\n:param card_type: Card type. Default to None (any card).\n:type card_type: str\n\n:return: True if credit card, false otherwise.\", \"Arguments\": \"input_string, card_type\", \"Defaults\": \"None\", \"Code\": \"def is_credit_card(input_string: Any, card_type: str = None) -> bool:\n    \"\"\"\n    Checks if a string is a valid credit card number.\n    If card type is provided then it checks against that specific type only,\n    otherwise any known credit card number will be accepted.\n\n    Supported card types are the following:\n\n    - VISA\n    - MASTERCARD\n    - AMERICAN_EXPRESS\n    - DINERS_CLUB\n    - DISCOVER\n    - JCB\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param card_type: Card type. Default to None (any card).\n    :type card_type: str\n\n    :return: True if credit card, false otherwise.\n    \"\"\"\n    if not is_full_string(input_string):\n        return False\n\n    if card_type:\n        if card_type not in CREDIT_CARDS:\n            raise KeyError(\n                'Invalid card type \"{}\". Valid types are: {}'.format(card_type, ', '.join(CREDIT_CARDS.keys()))\n            )\n        return CREDIT_CARDS[card_type].match(input_string) is not None\n\n    for c in CREDIT_CARDS:\n        if CREDIT_CARDS[c].match(input_string) is not None:\n            return True\n\n    return False\""]}
{"_id": 21, "function_list": ["\"_id\": \"21\", \"Function Name\": \"is_camel_case\", \"Docstring\": \"Checks if a string is formatted as camel case.\n\nA string is considered camel case when:\n\n- it's composed only by letters ([a-zA-Z]) and optionally numbers ([0-9])\n- it contains both lowercase and uppercase letters\n- it does not start with a number\n\n*Examples:*\n\n>>> is_camel_case('MyString') # returns true\n>>> is_camel_case('mystring') # returns false\n\n:param input_string: String to test.\n:type input_string: str\n:return: True for a camel case string, false otherwise.\", \"Arguments\": \"input_string\", \"Defaults\": \"\", \"Code\": \"def is_camel_case(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is formatted as camel case.\n\n    A string is considered camel case when:\n\n    - it's composed only by letters ([a-zA-Z]) and optionally numbers ([0-9])\n    - it contains both lowercase and uppercase letters\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_camel_case('MyString') # returns true\n    >>> is_camel_case('mystring') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :return: True for a camel case string, false otherwise.\n    \"\"\"\n    return is_full_string(input_string) and CAMEL_CASE_TEST_RE.match(input_string) is not None\"", "\"_id\": \"21\", \"Function Name\": \"__require_valid_input_and_encoding\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"input_string, encoding\", \"Defaults\": \"\", \"Code\": \"    def __require_valid_input_and_encoding(input_string: str, encoding: str):\n        if not is_string(input_string):\n            raise InvalidInputError(input_string)\n\n        if len(input_string) == 0:\n            raise ValueError('Input string cannot be empty')\n\n        if not is_string(encoding):\n            raise ValueError('Invalid encoding')\""]}
{"_id": 23, "function_list": ["\"_id\": \"23\", \"Function Name\": \"is_json\", \"Docstring\": \"Check if a string is a valid json.\n\n*Examples:*\n\n>>> is_json('{\"name\": \"Peter\"}') # returns true\n>>> is_json('[1, 2, 3]') # returns true\n>>> is_json('{nope}') # returns false\n\n:param input_string: String to check.\n:type input_string: str\n:return: True if json, false otherwise\", \"Arguments\": \"input_string\", \"Defaults\": \"\", \"Code\": \"def is_json(input_string: Any) -> bool:\n    \"\"\"\n    Check if a string is a valid json.\n\n    *Examples:*\n\n    >>> is_json('{\"name\": \"Peter\"}') # returns true\n    >>> is_json('[1, 2, 3]') # returns true\n    >>> is_json('{nope}') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if json, false otherwise\n    \"\"\"\n    if is_full_string(input_string) and JSON_WRAPPER_RE.match(input_string) is not None:\n        try:\n            return isinstance(json.loads(input_string), (dict, list))\n        except (TypeError, ValueError, OverflowError):\n            pass\n\n    return False\""]}
{"_id": 24, "function_list": ["\"_id\": \"24\", \"Function Name\": \"is_uuid\", \"Docstring\": \"Check if a string is a valid UUID.\n\n*Example:*\n\n>>> is_uuid('6f8aa2f9-686c-4ac3-8766-5712354a04cf') # returns true\n>>> is_uuid('6f8aa2f9686c4ac387665712354a04cf') # returns false\n>>> is_uuid('6f8aa2f9686c4ac387665712354a04cf', allow_hex=True) # returns true\n\n:param input_string: String to check.\n:type input_string: str\n:param allow_hex: True to allow UUID hex representation as valid, false otherwise (default)\n:type allow_hex: bool\n:return: True if UUID, false otherwise\", \"Arguments\": \"input_string, allow_hex\", \"Defaults\": \"False\", \"Code\": \"def is_uuid(input_string: Any, allow_hex: bool = False) -> bool:\n    \"\"\"\n    Check if a string is a valid UUID.\n\n    *Example:*\n\n    >>> is_uuid('6f8aa2f9-686c-4ac3-8766-5712354a04cf') # returns true\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf') # returns false\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf', allow_hex=True) # returns true\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allow_hex: True to allow UUID hex representation as valid, false otherwise (default)\n    :type allow_hex: bool\n    :return: True if UUID, false otherwise\n    \"\"\"\n    # string casting is used to allow UUID itself as input data type\n    s = str(input_string)\n\n    if allow_hex:\n        return UUID_HEX_OK_RE.match(s) is not None\n\n    return UUID_RE.match(s) is not None\"", "\"_id\": \"24\", \"Function Name\": \"is_uuid\", \"Docstring\": \"Check if a string is a valid UUID.\n\n*Example:*\n\n>>> is_uuid('6f8aa2f9-686c-4ac3-8766-5712354a04cf') # returns true\n>>> is_uuid('6f8aa2f9686c4ac387665712354a04cf') # returns false\n>>> is_uuid('6f8aa2f9686c4ac387665712354a04cf', allow_hex=True) # returns true\n\n:param input_string: String to check.\n:type input_string: str\n:param allow_hex: True to allow UUID hex representation as valid, false otherwise (default)\n:type allow_hex: bool\n:return: True if UUID, false otherwise\", \"Arguments\": \"input_string, allow_hex\", \"Defaults\": \"False\", \"Code\": \"def is_uuid(input_string: Any, allow_hex: bool = False) -> bool:\n    \"\"\"\n    Check if a string is a valid UUID.\n\n    *Example:*\n\n    >>> is_uuid('6f8aa2f9-686c-4ac3-8766-5712354a04cf') # returns true\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf') # returns false\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf', allow_hex=True) # returns true\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allow_hex: True to allow UUID hex representation as valid, false otherwise (default)\n    :type allow_hex: bool\n    :return: True if UUID, false otherwise\n    \"\"\"\n    # string casting is used to allow UUID itself as input data type\n    s = str(input_string)\n\n    if allow_hex:\n        return UUID_HEX_OK_RE.match(s) is not None\n\n    return UUID_RE.match(s) is not None\""]}
{"_id": 25, "function_list": ["\"_id\": \"25\", \"Function Name\": \"test_cannot_handle_non_string_objects\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"self\", \"Defaults\": \"\", \"Code\": \"    def test_cannot_handle_non_string_objects(self):\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(None)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"NoneType\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(False)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"bool\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize(0)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"int\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize([])\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"list\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            booleanize({'a': 1})\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"dict\"')\""]}
{"_id": 26, "function_list": ["\"_id\": \"26\", \"Function Name\": \"test_slugify_trim_strings_and_extra_white_spaces\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"self\", \"Defaults\": \"\", \"Code\": \"    def test_slugify_trim_strings_and_extra_white_spaces(self):\n        self.assertEqual(slugify('hello '), 'hello')\n        self.assertEqual(slugify(' hello'), 'hello')\n        self.assertEqual(slugify(' hello '), 'hello')\n        self.assertEqual(slugify(' hello world '), 'hello-world')\n        self.assertEqual(slugify('''\n            \\n\\t\n            hello \\n\\t world\n            \\n\\t\n        '''), 'hello-world')\""]}
{"_id": 27, "function_list": ["\"_id\": \"27\", \"Function Name\": \"is_ip_v6\", \"Docstring\": \"Checks if a string is a valid ip v6.\n\n*Examples:*\n\n>>> is_ip_v6('2001:db8:85a3:0000:0000:8a2e:370:7334') # returns true\n>>> is_ip_v6('2001:db8:85a3:0000:0000:8a2e:370:?') # returns false (invalid \"?\")\n\n:param input_string: String to check.\n:type input_string: str\n:return: True if a v6 ip, false otherwise.\", \"Arguments\": \"input_string\", \"Defaults\": \"\", \"Code\": \"def is_ip_v6(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is a valid ip v6.\n\n    *Examples:*\n\n    >>> is_ip_v6('2001:db8:85a3:0000:0000:8a2e:370:7334') # returns true\n    >>> is_ip_v6('2001:db8:85a3:0000:0000:8a2e:370:?') # returns false (invalid \"?\")\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if a v6 ip, false otherwise.\n    \"\"\"\n    return is_full_string(input_string) and IP_V6_RE.match(input_string) is not None\"", "\"_id\": \"27\", \"Function Name\": \"is_ip_v6\", \"Docstring\": \"Checks if a string is a valid ip v6.\n\n*Examples:*\n\n>>> is_ip_v6('2001:db8:85a3:0000:0000:8a2e:370:7334') # returns true\n>>> is_ip_v6('2001:db8:85a3:0000:0000:8a2e:370:?') # returns false (invalid \"?\")\n\n:param input_string: String to check.\n:type input_string: str\n:return: True if a v6 ip, false otherwise.\", \"Arguments\": \"input_string\", \"Defaults\": \"\", \"Code\": \"def is_ip_v6(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is a valid ip v6.\n\n    *Examples:*\n\n    >>> is_ip_v6('2001:db8:85a3:0000:0000:8a2e:370:7334') # returns true\n    >>> is_ip_v6('2001:db8:85a3:0000:0000:8a2e:370:?') # returns false (invalid \"?\")\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if a v6 ip, false otherwise.\n    \"\"\"\n    return is_full_string(input_string) and IP_V6_RE.match(input_string) is not None\"", "\"_id\": \"27\", \"Function Name\": \"__require_valid_input_and_encoding\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"input_string, encoding\", \"Defaults\": \"\", \"Code\": \"    def __require_valid_input_and_encoding(input_string: str, encoding: str):\n        if not is_string(input_string):\n            raise InvalidInputError(input_string)\n\n        if len(input_string) == 0:\n            raise ValueError('Input string cannot be empty')\n\n        if not is_string(encoding):\n            raise ValueError('Invalid encoding')\"", "\"_id\": \"27\", \"Function Name\": \"is_ip\", \"Docstring\": \"Checks if a string is a valid ip (either v4 or v6).\n\n*Examples:*\n\n>>> is_ip('255.200.100.75') # returns true\n>>> is_ip('2001:db8:85a3:0000:0000:8a2e:370:7334') # returns true\n>>> is_ip('1.2.3') # returns false\n\n:param input_string: String to check.\n:type input_string: str\n:return: True if an ip, false otherwise.\", \"Arguments\": \"input_string\", \"Defaults\": \"\", \"Code\": \"def is_ip(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is a valid ip (either v4 or v6).\n\n    *Examples:*\n\n    >>> is_ip('255.200.100.75') # returns true\n    >>> is_ip('2001:db8:85a3:0000:0000:8a2e:370:7334') # returns true\n    >>> is_ip('1.2.3') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if an ip, false otherwise.\n    \"\"\"\n    return is_ip_v6(input_string) or is_ip_v4(input_string)\""]}
{"_id": 31, "function_list": ["\"_id\": \"31\", \"Function Name\": \"is_string\", \"Docstring\": \"Checks if an object is a string.\n\n*Example:*\n\n>>> is_string('foo') # returns true\n>>> is_string(b'foo') # returns false\n\n:param obj: Object to test.\n:return: True if string, false otherwise.\", \"Arguments\": \"obj\", \"Defaults\": \"\", \"Code\": \"def is_string(obj: Any) -> bool:\n    \"\"\"\n    Checks if an object is a string.\n\n    *Example:*\n\n    >>> is_string('foo') # returns true\n    >>> is_string(b'foo') # returns false\n\n    :param obj: Object to test.\n    :return: True if string, false otherwise.\n    \"\"\"\n    return isinstance(obj, str)\"", "\"_id\": \"31\", \"Function Name\": \"slugify\", \"Docstring\": \"Converts a string into a \"slug\" using provided separator.\nThe returned string has the following properties:\n\n- it has no spaces\n- all letters are in lower case\n- all punctuation signs and non alphanumeric chars are removed\n- words are divided using provided separator\n- all chars are encoded as ascii (by using `asciify()`)\n- is safe for URL\n\n*Examples:*\n\n>>> slugify('Top 10 Reasons To Love Dogs!!!') # returns: 'top-10-reasons-to-love-dogs'\n>>> slugify('Mönstér Mägnët') # returns 'monster-magnet'\n\n:param input_string: String to convert.\n:type input_string: str\n:param separator: Sign used to join string tokens (default to \"-\").\n:type separator: str\n:return: Slug string\", \"Arguments\": \"input_string, separator\", \"Defaults\": \"'-'\", \"Code\": \"def slugify(input_string: str, separator: str = '-') -> str:\n    \"\"\"\n    Converts a string into a \"slug\" using provided separator.\n    The returned string has the following properties:\n\n    - it has no spaces\n    - all letters are in lower case\n    - all punctuation signs and non alphanumeric chars are removed\n    - words are divided using provided separator\n    - all chars are encoded as ascii (by using `asciify()`)\n    - is safe for URL\n\n    *Examples:*\n\n    >>> slugify('Top 10 Reasons To Love Dogs!!!') # returns: 'top-10-reasons-to-love-dogs'\n    >>> slugify('Mönstér Mägnët') # returns 'monster-magnet'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign used to join string tokens (default to \"-\").\n    :type separator: str\n    :return: Slug string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    # replace any character that is NOT letter or number with spaces\n    out = NO_LETTERS_OR_NUMBERS_RE.sub(' ', input_string.lower()).strip()\n\n    # replace spaces with join sign\n    out = SPACES_RE.sub(separator, out)\n\n    # normalize joins (remove duplicates)\n    out = re.sub(re.escape(separator) + r'+', separator, out)\n\n    return asciify(out)\"", "\"_id\": \"31\", \"Function Name\": \"test_slugify_trim_strings_and_extra_white_spaces\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"self\", \"Defaults\": \"\", \"Code\": \"    def test_slugify_trim_strings_and_extra_white_spaces(self):\n        self.assertEqual(slugify('hello '), 'hello')\n        self.assertEqual(slugify(' hello'), 'hello')\n        self.assertEqual(slugify(' hello '), 'hello')\n        self.assertEqual(slugify(' hello world '), 'hello-world')\n        self.assertEqual(slugify('''\n            \\n\\t\n            hello \\n\\t world\n            \\n\\t\n        '''), 'hello-world')\""]}
{"_id": 34, "function_list": ["\"_id\": \"34\", \"Function Name\": \"is_isbn_10\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"self\", \"Defaults\": \"\", \"Code\": \"    def is_isbn_10(self) -> bool:\n        if len(self.input_string) == 10:\n            product = 0\n\n            try:\n                for index, digit in enumerate(self.input_string):\n                    product += int(digit) * (index + 1)\n\n                return product % 11 == 0\n\n            except ValueError:\n                pass\n\n        return False\""]}
{"_id": 35, "function_list": ["\"_id\": \"35\", \"Function Name\": \"test_throws_error_if_size_is_null\", \"Docstring\": \"No docstring provided\", \"Arguments\": \"self\", \"Defaults\": \"\", \"Code\": \"    def test_throws_error_if_size_is_null(self):\n        with self.assertRaises(ValueError) as raised:\n            # noinspection PyTypeChecker\n            secure_random_hex(None)\n\n        self.assertEqual(str(raised.exception), 'byte_count must be >= 1')\""]}
{"_id": 37, "function_list": ["\"_id\": \"37\", \"Function Name\": \"uuid\", \"Docstring\": \"Generated an UUID string (using `uuid.uuid4()`).\n\n*Examples:*\n\n>>> uuid() # possible output: '97e3a716-6b33-4ab9-9bb1-8128cb24d76b'\n>>> uuid(as_hex=True) # possible output: '97e3a7166b334ab99bb18128cb24d76b'\n\n:param as_hex: True to return the hex value of the UUID, False to get its default representation (default).\n:return: uuid string.\", \"Arguments\": \"as_hex\", \"Defaults\": \"False\", \"Code\": \"def uuid(as_hex: bool = False) -> str:\n    \"\"\"\n    Generated an UUID string (using `uuid.uuid4()`).\n\n    *Examples:*\n\n    >>> uuid() # possible output: '97e3a716-6b33-4ab9-9bb1-8128cb24d76b'\n    >>> uuid(as_hex=True) # possible output: '97e3a7166b334ab99bb18128cb24d76b'\n\n    :param as_hex: True to return the hex value of the UUID, False to get its default representation (default).\n    :return: uuid string.\n    \"\"\"\n    uid = uuid4()\n\n    if as_hex:\n        return uid.hex\n\n    return str(uid)\""]}
{"_id": 2, "function_list": []}
{"_id": 3, "function_list": []}
{"_id": 9, "function_list": []}
{"_id": 13, "function_list": []}
{"_id": 15, "function_list": []}
{"_id": 17, "function_list": []}
{"_id": 19, "function_list": []}
{"_id": 22, "function_list": []}
{"_id": 28, "function_list": []}
{"_id": 29, "function_list": []}
{"_id": 30, "function_list": []}
{"_id": 32, "function_list": []}
{"_id": 33, "function_list": []}
{"_id": 36, "function_list": []}
{"_id": 38, "function_list": []}
{"_id": 39, "function_list": []}
